'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

var _errors = require('./errors');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Syncano server
 * @property {Function} query Instance of syncano DataObject
 */
var Data = function (_QueryBuilder) {
  _inherits(Data, _QueryBuilder);

  function Data() {
    _classCallCheck(this, Data);

    return _possibleConstructorReturn(this, (Data.__proto__ || Object.getPrototypeOf(Data)).apply(this, arguments));
  }

  _createClass(Data, [{
    key: 'url',
    value: function url(id) {
      var _instance = this.instance,
          instanceName = _instance.instanceName,
          className = _instance.className;

      var url = (0, _utils.buildInstanceURL)(instanceName) + '/classes/' + className + '/objects/' + (id ? id + '/' : '');

      if (this._url !== undefined) {
        url = this._url;
      }

      var query = _querystring2.default.stringify(this.query);

      return query ? url + '?' + query : url;
    }

    /**
     * List objects matching query.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * // Get all posts
     * const posts = await data.posts.list()
     * @example {@lang javascript}
     * // Get 10 posts
     * const posts = await data.posts.take(10).list()
     */

  }, {
    key: 'list',
    value: function list() {
      var _this2 = this;

      var result = [];
      var self = this;
      var baseUrl = this.baseUrl,
          relationships = this.relationships,
          instance = this.instance;

      var fetch = this.fetch.bind(this);
      var pageSize = this.query.page_size || 0;

      return new Promise(function (resolve, reject) {
        request(_this2.url());

        function request(url) {
          fetch(url).then(saveToResult).then(loadNextPage).then(resolveRelatedModels).then(replaceCustomTypesWithValue).then(resolveIfFinished).catch(function (err) {
            return reject(err);
          });
        }

        function saveToResult(response) {
          result = result.concat(response.objects);

          return response;
        }

        function loadNextPage(response) {
          var hasNextPageMeta = response.next;
          var hasNotEnoughResults = pageSize === 0 || pageSize > result.length;

          if (hasNextPageMeta && hasNotEnoughResults) {
            request('' + baseUrl + response.next);
          } else {
            return true;
          }
        }

        function resolveRelatedModels(shouldResolve) {
          if (shouldResolve === false) {
            return;
          }

          return new Promise(function (resolve, reject) {
            if (relationships.length === 0) {
              resolve(true);
            }

            var resolvers = relationships.map(function (reference) {
              return new Promise(function (resolve, reject) {
                var empty = {
                  target: reference,
                  items: []
                };

                if (result[0] === undefined) {
                  resolve(empty);
                }

                if (result[0][reference] === undefined) {
                  throw new Error('Invalid reference name "' + reference + '"');
                }

                // Search for rows with references
                var references = result.filter(function (row) {
                  return row[reference];
                }).map(function (row) {
                  return row[reference];
                });

                // No references so resolve with empty array
                if (references.length === 0) {
                  resolve(empty);
                }

                var target = references[0].target;

                var ids = references.map(function (item) {
                  return item.value;
                });

                var load = new Data();

                if (target === 'user') {
                  load._url = (0, _utils.buildInstanceURL)(instance.instanceName) + '/users/';
                }

                load.instance = self.instance;
                load.instance.className = target;

                load.where('id', 'in', ids).list().then(function (items) {
                  resolve({ target: reference, items: items });
                }).catch(reject);
              });
            });

            Promise.all(resolvers).then(function (models) {
              result = result.map(function (item) {
                models.forEach(function (_ref) {
                  var target = _ref.target,
                      items = _ref.items;

                  var related = items.find(function (obj) {
                    return item[target] && obj.id === item[target].value;
                  });

                  item[target] = related || item[target];
                });

                return item;
              });

              resolve(true);
            }).catch(reject);
          });
        }

        function replaceCustomTypesWithValue(shouldResolve) {
          if (shouldResolve === false) {
            return;
          }

          result = result.map(function (item) {
            Object.keys(item).forEach(function (key) {
              var value = item[key];
              var isObject = value instanceof Object && !Array.isArray(value);
              var hasType = isObject && value.type !== undefined;
              var hasTarget = isObject && value.target !== undefined;
              var hasValue = isObject && value.value !== undefined;

              if (isObject && hasType && hasTarget && hasValue) {
                item[key] = value.value;
              }
            });

            return item;
          });

          return true;
        }

        function resolveIfFinished(shouldResolve) {
          if (shouldResolve) {
            if (pageSize !== 0) {
              result = result.slice(0, pageSize);
            }

            resolve(result);
          }
        }
      });
    }

    /**
     * Get first element matching query or return null.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').first()
     */

  }, {
    key: 'first',
    value: function first() {
      return this.take(1).list().then(function (response) {
        return response[0] || null;
      });
    }

    /**
     * Get first element matching query or throw erro'status', 'in', ['draft', 'published']se}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').firstOrFail()
     */

  }, {
    key: 'firstOrFail',
    value: function firstOrFail() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.first().then(function (object) {
          return object ? resolve(object) : reject(new _errors.NotFoundError());
        }).catch(function () {
          reject(new _errors.NotFoundError());
        });
      });
    }

    /**
     * Get single object by id or objects list if ids passed as array.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.find(4)
     * @example {@lang javascript}
     * const posts = await data.posts.find([20, 99, 125])
     */

  }, {
    key: 'find',
    value: function find(ids) {
      if (Array.isArray(ids)) {
        return this.where('id', 'in', ids).list();
      }

      return this.where('id', 'eq', ids).first();
    }

    /**
     * Same as #find method but throws error for no results.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.findOrFail(4)
     * @example {@lang javascript}
     * const posts = await data.posts.findOrFail([20, 99, 125])
     * @example {@lang javascript}
     * // Will throw error if at lest one of records was not found
     * const posts = await data.posts.findOrFail([20, 99, 125], true)
     */

  }, {
    key: 'findOrFail',
    value: function findOrFail(ids) {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        _this4.find(ids).then(function (response) {
          var shouldThrow = Array.isArray(ids) ? response.length !== ids.length : response === null;

          return shouldThrow ? reject(new _errors.NotFoundError()) : resolve(response);
        }).catch(function () {
          reject(new _errors.NotFoundError());
        });
      });
    }

    /**
     * Number of objects to get.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.take(500).list()
     */

  }, {
    key: 'take',
    value: function take(count) {
      return this.withQuery({ page_size: count }); // eslint-disable-line camelcase
    }

    /**
     * Set order of fetched objects.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.orderBy('created_at', 'DESC').list()
     */

  }, {
    key: 'orderBy',
    value: function orderBy(column) {
      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';

      direction = direction.toLowerCase();
      direction = direction === 'desc' ? '-' : '';

      return this.withQuery({
        order_by: '' + direction + column // eslint-disable-line camelcase
      });
    }

    /**
     * Filter rows.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'in', ['draft', 'published']).list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('created_at', 'gt' '2016-02-13').list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('user.id', 30).list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('user.full_name', 'contains', 'John').list()
     */

  }, {
    key: 'where',
    value: function where(column, operator, value) {
      var whereOperator = value ? '_' + operator : '_eq';
      var whereValue = value === undefined ? operator : value;

      var currentQuery = JSON.parse(this.query.query || '{}');

      var nextQuery = column.split('.').reverse().reduce(function (child, item) {
        return _defineProperty({}, item, child === null ? _defineProperty({}, whereOperator, whereValue) : {
          _is: child
        });
      }, null);

      var query = Object.assign(currentQuery, nextQuery);

      return this.withQuery({ query: JSON.stringify(query) });
    }

    /**
     * Expand references and relationships.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.with('author').list()
     * @example {@lang javascript}
     * data.posts.with(['author', 'last_editor']).list()
     */

  }, {
    key: 'with',
    value: function _with() {
      for (var _len = arguments.length, models = Array(_len), _key = 0; _key < _len; _key++) {
        models[_key] = arguments[_key];
      }

      var relationships = Array.isArray(models[0]) ? models[0] : models;

      return this.withRelationships(relationships);
    }

    /**
     * Create new object.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.create({
     *   title: 'Example post title',
     *   content: 'Lorem ipsum dolor sit amet.'
     * })
     */

  }, {
    key: 'create',
    value: function create(body) {
      return this.fetch(this.url(), {
        method: 'POST',
        body: JSON.stringify(body)
      });
    }

    /**
     * Update object in database.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.update(55, { content: 'No more lorem ipsum!' })
     */

  }, {
    key: 'update',
    value: function update(id, body) {
      return this.fetch(this.url(id), {
        method: 'PATCH',
        body: JSON.stringify(body)
      });
    }

    /**
     * Remove object from database.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.delete(55)
     */

  }, {
    key: 'delete',
    value: function _delete(id) {
      return this.fetch(this.url(id), {
        method: 'DELETE'
      });
    }
  }]);

  return Data;
}(_queryBuilder2.default);

exports.default = Data;
module.exports = exports['default'];