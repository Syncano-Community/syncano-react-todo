'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _utils = require('./utils');

var _settings = require('./settings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var QueryBuilder = function () {
  function QueryBuilder() {
    _classCallCheck(this, QueryBuilder);

    this.baseUrl = 'https://' + (0, _settings.getHost)();
  }

  _createClass(QueryBuilder, [{
    key: 'fetch',
    value: function fetch(url, options) {
      return (0, _nodeFetch2.default)(url, _extends({
        headers: {
          'Content-Type': 'application/json',
          'X-API-KEY': this.instance.token
        }
      }, options)).then(_utils.checkStatus).then(_utils.parseJSON);
    }
  }, {
    key: 'nonInstanceFetch',
    value: function nonInstanceFetch(url, options, headers) {
      return (0, _nodeFetch2.default)(url, _extends({
        headers: _extends({
          'Content-Type': 'application/json'
        }, headers)
      }, options)).then(_utils.checkStatus).then(_utils.parseJSON);
    }
  }, {
    key: 'withQuery',
    value: function withQuery(query) {
      this._query = Object.assign({}, this.query, query);

      return this;
    }
  }, {
    key: 'withRelationships',
    value: function withRelationships(relationships) {
      this._relationships = this.relationships.concat(relationships);

      return this;
    }
  }, {
    key: 'query',
    get: function get() {
      return this._query || {};
    }
  }, {
    key: 'relationships',
    get: function get() {
      return this._relationships || [];
    }
  }]);

  return QueryBuilder;
}();

exports.default = QueryBuilder;
module.exports = exports['default'];